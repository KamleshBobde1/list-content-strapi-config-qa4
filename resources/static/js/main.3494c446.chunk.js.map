{"version":3,"sources":["helper/Constant.js","api/Api.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/MultiContentList.js","en.js","it.js","page/StrapiConfigWarning.js","App.js","custom-element/et-app.js"],"names":["PERPAGEOPTIONS","SELECT","id","NAME","CREATEDBY","LASTEDITED","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","STRAPI_BASE_URL_KEY","domain","process","REACT_APP_STRAPI_API_URL","templateBaseUrl","sortByCreateDateByDescOrder","STRAPI_TOKEN","getCollectionTypes","a","axios","fetchStrapiBaseUrl","addAuthorizationRequestConfig","get","data","getContents","collectionType","page","pageSize","rootAdminEndPoint","url","getLocales","localeUrl","getAllRecordsByCollectionType","lastPageSize","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","token","window","entando","keycloak","authenticated","localStorage","getItem","headers","Authorization","config","defaultOptions","getStrapiConfigurations","then","res","catch","e","result","errorCheck","checkIfUrlExists","head","strapiBaseUrl","isError","baseUrl","status","setItem","hasOwnProperty","toJSON","name","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","searchByKey","parseData","JSON","parse","SimpleTable","props","componentDidMount","decodeURI","contentIdAndTemplateId","getContentByHighestId","setState","loadingData","componentDidUpdate","prevProps","prevState","getContentIds","contents","highestContentId","map","el","sort","b","reverse","selectedContentName","parsedSelectedContent","selectedContent","filteredCont","cont","results","find","templateId","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","preventDefault","className","onChangeTemplateId","templateSelectedForContent","target","value","templateChangedForContent","applyTemplateToContent","mappingOfContentTemplate","setContentTemplate","onApplyToAll","document","getElementsByName","forEach","state","applyTemplateToAllContent","toString","applyTemplateToAllContentTwo","selectTempForContent","templateType","selectedTemplateType","this","Spinner","loading","size","decideToShowQuery","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","width","display","onChange","message","selected","disabled","hidden","templateList","templateName","textAlign","to","margin","React","Component","Title","createdAt","createDate","selectDefaultTemplate","Config","setSelectedContent","selectedContentArr","selectedContenttype","handleTypeaheadChangeContentType","selectedContentType","option","label","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","element","push","info","pluralName","templatesList","collectionTypes","saveQueryDecode","saveQuery","handleAddNewContent","strapiContentManagerUrl","newWindow","open","focus","selectedContentLabel","SaveQueryHandler","searchTerm","bind","console","log","xs","title","role","bsStyle","manipulateIsEditable","marginTop","setTemplateId","borderRight","lg","padding","color","intl","formatMessage","injectIntl","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","paddingRight","lineHeight","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","setActiveTabKey","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","getLocaleInfo","localeInfo","strapiUrl","code","contentDettailsResponse","dataToShowOnModalRestTabs","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","MultiContentList","populateConfigForm","setCollectionTypeState","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","getContentsByCollectionType","searchText","selectedCollectionTypeValue","searchQuery","colLabel","searchResult","stateUpdateOnFilterContentsByName","componentWillUnmount","stowSearchQueryTillSubmit","selectedContentList","btnVisibility","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","setFieldSearchBy","collType","contentData","lastPage","pagination","pageCount","totalItems","total","setSearchBy","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","onContentListSaveHandler","setQueryTerm","setSelectedContentName","checkIfSelected","editMode","isEditable","cancelHandler","tempSelectedCollectionType","collectionTypeApiData","displayName","singularName","contentItem","removedUnselectedContentId","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","placeholder","emptyLabel","options","toggleMenu","align","onContentSelect","checked","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","changePage","onFirstPage","onPreviousPage","onNextPage","onLastPage","messages","sm","borderBottom","isToEnableSaveQueryBtn","StrapiConfigWarning","href","location","reload","App","getStrapiConfiguration","setLocale","removeItem","strapiConfLoaded","getJsonString","stringify","encodeURI","contentName","contentLabel","saveQueryData","fieldSearchWith","currLocale","decideLocale","en","it","path","exact","WidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","MainApp","ref","ReactDOM","render","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.3494c446.chunk.js","sourcesContent":["import { locale } from \"moment\";\nimport {  FormattedMessage } from \"react-intl\";\n\n/*********************\n * PAGINATION ********\n *********************/\n\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\"; \n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = <FormattedMessage id='app.select' />\nexport const NAME = <FormattedMessage id='app.name' />\nexport const CREATEDBY = <FormattedMessage id='app.created' />\nexport const LASTEDITED = <FormattedMessage id='app.lastEdited' />\nexport const CREATEDDATE = <FormattedMessage id='app.createdDate' />\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDDATE: CREATEDDATE\n}\n\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS =  [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />\n\nexport const STRAPI_BASE_URL_KEY = 'STRAPI_CONFIG';\nexport const STRAPI_CONFIG_NOT_AVAIL = 'Strapi configuration not available';\nexport const STRAPI_CONTENT_MANAGER_URI = '/admin/content-manager';\nexport const BTN_RELOAD_PAGE = 'Reload Page';\nexport const STRAPI_URL = 'http://172.40.0.142:1337'","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE, STRAPI_BASE_URL_KEY } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst localeUrl = `${domain}/i18n/locales`\n\nconst STRAPI_TOKEN = {\n    'Authorization': `EntKcToken ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    // return axios.post(`${domain}/admin/login`, data);\n    return axios.post(`${await fetchStrapiBaseUrl()}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    // const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    const { data } = await axios.get(`${await fetchStrapiBaseUrl()}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    const localeUrl = `${await fetchStrapiBaseUrl()}/i18n/locales`;\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const fetchContents = async (collectionType) => {\n    return await getContents(collectionType);\n}\n\nexport const getAllRecordsByCollectionType = async (collectionType, lastPageSize) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=1&pageSize=${lastPageSize}&sort=id:ASC`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    // const data = await axios.get(`${templateBaseUrl}`);\n    //TODO: Uncomment when using proper token system for template management.\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl + collectionTypeUrl}`, addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}\n\n/**\n * Get strapi configurations\n * @returns\n */\nexport const getStrapiConfigurations = async () => {\n    const result = await axios.get(process.env.REACT_APP_STRAPI_CONFIG_BE_URL)\n        .then((res) => {\n            return res;\n        }).catch((e) => {\n            return e;\n        });\n    return errorCheck(result);\n}\n\n/**\n * Check if the given url is available\n * @param {*} url \n * @returns \n */\nexport const checkIfUrlExists = async (url) => {\n    const result = await axios.head(url)\n        .then((res) => {\n            return res;\n        }).catch((e) => {\n            return e;\n        });\n    return errorCheck(result);\n}\n\n/**\n * Get strapi configuration from local storage\n * @returns \n */\nexport const fetchStrapiBaseUrl = async () => {\n    const strapiBaseUrl = localStorage.getItem(STRAPI_BASE_URL_KEY);\n    if (!strapiBaseUrl) {\n        const { data, isError } = await getStrapiConfigurations();\n        if (!isError && data && data.data && data.data.baseUrl) {\n            const result = await checkIfUrlExists(data.data.baseUrl);\n            if (result && result.data && result.data.status === 200 && !result.isError) {\n                localStorage.setItem(STRAPI_BASE_URL_KEY, data.data.baseUrl);\n                return data.data.baseUrl;\n            }\n        }\n    }\n    return strapiBaseUrl;\n}\n\nconst errorCheck = (data) => {\n    let isError = false\n    if (data.hasOwnProperty(\"toJSON\") && data.toJSON().name === \"Error\") {\n        isError = true\n    }\n    return {\n        data,\n        isError,\n    }\n}\n\n//To update the build","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    searchByKey = '';\n    return '-';\n}\n\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});\n\nexport const parseData = (data) => data.length > 0 ? JSON.parse(data) : data;\n","import moment from 'moment';\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport { getKey, parseData } from '../helper/Helper';\nimport {  FormattedMessage } from \"react-intl\";\nimport { fetchContents, getAllRecordsByCollectionType } from '../api/Api';\nimport { Spinner } from 'patternfly-react/dist/js/components/Spinner';\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n            templateChangedForContent: null,\n            templateSelectedForContent: 0,\n            selectedContent: [],\n            loadingData: false\n        }\n    }\n\n    componentDidMount = () => {\n        if (parseData(decodeURI(this.props.contentIdAndTemplateId)).length) {\n            this.getContentByHighestId();\n        }\n        if (!this.props.contentIdAndTemplateId) {\n            this.setState({ loadingData: false })\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.contentIdAndTemplateId !== this.props.contentIdAndTemplateId) {\n            if (parseData(decodeURI(this.props.contentIdAndTemplateId)).length) {\n                this.getContentByHighestId();\n            }\n        };\n    }\n\n    getContentByHighestId = async () => {\n        this.setState({loadingData : true})\n        const getContentIds = this.props.contentIdAndTemplateId && parseData(decodeURI(this.props.contentIdAndTemplateId));\n        let contents = [];\n        if (getContentIds) {\n            const highestContentId = getContentIds.map(el => el.contentId).sort(function (a, b) { return a - b; }).reverse()[0];\n            contents = await getAllRecordsByCollectionType(this.props.selectedContentName, highestContentId);\n        }\n        const parsedSelectedContent = this.props.selectedContent.length ? parseData(this.props.selectedContent) : ''\n        if (parsedSelectedContent.length) {\n            const filteredCont = parsedSelectedContent.map(cont => contents.results.find(el => el.id === cont.id))\n            filteredCont.map(el => {\n                getContentIds.find(cont => {\n                    if (el.id === +cont.contentId) {\n                        el.templateId = +cont.templateId;\n                    }\n                })\n            });\n            this.setState({ selectedContent: filteredCont, loadingData: false })\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e, contentId) => {\n        this.setState({ templateSelectedForContent: e.target.value })\n        this.setState({ templateChangedForContent: contentId });\n        const applyTemplateToContent = parseData(this.props.mappingOfContentTemplate).map(el => {\n            el.contentId === contentId && (el.templateId = e.target.value)\n            return {id: el.id, contentId: el.contentId, templateId: el.templateId};\n        });\n        this.props.setContentTemplate(applyTemplateToContent);\n    }\n\n    onApplyToAll = () => {\n        document.getElementsByName('modelId').forEach((el) => { el.value = `${this.state.templateSelectedForContent}` })\n        const applyTemplateToAllContent = parseData(this.props.mappingOfContentTemplate).map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.props.setContentTemplate(applyTemplateToAllContent);\n        const applyTemplateToAllContentTwo = this.state.selectedContent.map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.setState({ selectedContent: applyTemplateToAllContentTwo })\n    }\n\n    selectTempForContent = (cont) => {\n        if (cont.templateId) return cont.templateId;\n        return 'none';\n    }\n\n    render() {\n        const getContentIds = this.props.contentIdAndTemplateId && parseData(decodeURI(this.props.contentIdAndTemplateId));\n        return (\n            <>\n                {this.state.loadingData &&\n                    <Spinner\n                        loading={this.state.loadingData}\n                        className=\"\"\n                        size=\"md\"\n                    ></Spinner>}\n                {!this.state.loadingData && <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr className={this.props.decideToShowQuery() ? 'disabled-table' : ''}>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.selectedContent.length > 0 && (\n                                this.state.selectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td width=\"30%\">\n                                                {/* <select defaultValue={item.templateId ? item.templateId+'' : 'none'} */}\n                                                <select\n                                                    style={{ display: \"inline-block\", width: \"50%\" }}\n                                                    name=\"modelId\" className=\"form-control\"\n                                                    onChange={(e) => this.onChangeTemplateId(e, item.id)}\n                                                >\n                                                    {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => (<option\n                                                            selected={!item.templateId ? true : false}\n                                                            value='none' disabled hidden>\n                                                            {message}\n                                                        </option>)\n                                                        }\n                                                    </FormattedMessage>}\n                                                    {this.props.templateList.length > 0 && this.props.templateList.map((el) => {\n                                                        return (<option\n                                                            selected={+item.templateId === +el.id ? true : false}\n                                                            key={el.id}\n                                                            value={el.id}>{el.templateName}</option>);\n                                                    })}\n                                                </select>\n                                                {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                                                    <Link to=\"#\">\n                                                        <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                                                        <FormattedMessage id='app.applyToAllContents' />\n                                                    </Link>\n                                                </div>}\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>}\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import {\n    Button, Col, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchStrapiBaseUrl, getCollectionTypes, getTemplate } from '../api/Api';\nimport { BTN_ADD_NEW_CONTENT, STRAPI_CONTENT_MANAGER_URI } from '../helper/Constant';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport {  FormattedMessage, injectIntl } from \"react-intl\";\nimport { parseData } from '../helper/Helper';\n\nclass Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedContent: [],\n            // name: null,\n            // nameTwo: null,\n            collectionTypes: [],\n            // selectedContentId: 0,\n            // selectedTemplateId: 'default',\n            templateList: [],\n            templateId: 'none'\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        // this.setState({ selectedContent: selectedContentArr })\n        // this.setState({ name: selectedContentArr })\n        // this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        // this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n\n\n        const saveQueryDecode = parseData(decodeURI(this.props.saveQuery));\n        if (saveQueryDecode) {\n            // this.statetemplateId = saveQueryDecode.templateId;\n            this.setState({ templateId: saveQueryDecode.templateId })\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.saveQuery !== this.props.saveQuery) {\n            const saveQueryDecode = parseData(decodeURI(this.props.saveQuery));\n            if (saveQueryDecode) {\n                // this.statetemplateId = saveQueryDecode.templateId;\n                this.setState({templateId: saveQueryDecode.templateId})\n            }\n        }\n    }\n\n    /**\n    * Navigate to Strapi dashboard/login page in a new tab on browser\n    */\n    handleAddNewContent = async () => {\n        let strapiContentManagerUrl = `${await fetchStrapiBaseUrl()}${STRAPI_CONTENT_MANAGER_URI}`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if (newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    decideToShowQuery = () => this.props.selectedContentLabel && !this.props.selectedContent.length;\n\n    onChangeTemplateId = (e) => {\n        this.props.SaveQueryHandler(\n            {\n                \"templateId\": e.target.value,\n                \"searchTerm\": this.props.searchTerm\n            }\n        );\n    }\n\n    render() {\n        console.log('this.props.saveQuery: ', this.props.saveQuery);\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            \n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.contentList\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span><FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/configpage\">\n                                            <Button bsStyle=\"primary\"\n                                                onClick={() => (this.decideToShowQuery() || this.props.selectedContent.length) && this.props.manipulateIsEditable('edit')}\n                                            >\n                                                {this.props.selectedContent.length || this.decideToShowQuery() ? <FormattedMessage id='app.edit' /> : <FormattedMessage id='app.addExistingContent' />}\n                                                {!this.decideToShowQuery() && this.props.selectedContent.length > 0 && ' list of '}\n                                                {this.decideToShowQuery() && <FormattedMessage id='app.query' />}\n                                                {this.props.selectedContent.length ? <FormattedMessage id='app.contentsButton' /> : !this.decideToShowQuery() ? <FormattedMessage id='app.contentButton' /> : ''}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    // content={this.state.selectedContent}\n                                    selectedContent={this.props.selectedContent}\n                                    mappingOfContentTemplate={this.props.mappingOfContentTemplate}\n                                    setContentTemplate={this.props.setContentTemplate}\n                                    decideToShowQuery={this.decideToShowQuery}\n                                    contentIdAndTemplateId={this.props.contentIdAndTemplateId}\n                                    selectedContentName={this.props.selectedContentName}\n                                />\n                                {\n                                     (\n                                        <div className=\"form-horizontal SingleContentConfigForm custom-well well\">\n                                            <Row className=\"divider\">\n                                                <Col xs={2}>\n                                                    <span className=\"SectionTitle\" role=\"button\">\n                                                        <span><FormattedMessage id='app.query' /></span>\n                                                    </span>\n                                                </Col>\n                                                <Col xs={10}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <span><b><FormattedMessage id='app.selectDefaultTemplate' /></b></span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {this.decideToShowQuery() && <Row>\n                                                <Col xs={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                    <FormattedMessage id='app.savedAsQuery' />\n                                                </Col>\n                                                <Col xs={1} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                </Col>\n                                                <Col lg={6} style={{ border: \"1px solid lightgrey\", padding: \".2rem\" }}>\n                                                    <code>\n                                                        <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.props.selectedContentLabel} </span>\n                                                        <span style={{ color: \"#0088ce\" }}>\n                                                            { this.props.searchTerm && <b>WHERE Name =  </b>}\n                                                            { this.props.searchTerm && `%${this.props.searchTerm}% ` }\n                                                            {/* <b>WHERE Name =  </b> %{this.props.searchTerm}% */}\n                                                            <b>ORDER BY</b> creation date <b>DESC</b></span>\n                                                    </code>\n                                                </Col>\n                                                <Col lg={3}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <select style={{ display: \"inline-block\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e)}>\n                                                            <option\n                                                                selected={this.state.templateId === \"none\" ? true : false}\n                                                                value=\"none\"\n                                                                disabled\n                                                                hidden>{this.props.intl.formatMessage({ id: \"app.selectTemplate\" })}</option>\n                                                            {this.state.templateList.length > 0 && this.state.templateList.map((el) => {\n                                                                return (<option\n                                                                    selected={+this.state.templateId === +el.id ? true : false}\n                                                                    key={el.id} value={el.id}>\n                                                                    {el.templateName}\n                                                                </option>);\n                                                            })}\n                                                        </select>\n                                                    </div>\n                                                </Col>\n                                            </Row>}\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row>\n            </form>\n        )\n    }\n}\n\nexport default injectIntl(Config);","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data, strapiBaseUrl) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY], strapiBaseUrl)\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow, strapiBaseUrl));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data, strapiBaseUrl) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data, strapiBaseUrl)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true, strapiBaseUrl)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data, strapiBaseUrl) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data, strapiBaseUrl)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data, strapiBaseUrl) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem', paddingRight: '2rem', lineHeight: '1.2' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()], strapiBaseUrl)\n                    :\n                    renderAccordionData(data, strapiBaseUrl)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject, strapiBaseUrl) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data, strapiBaseUrl)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data, strapiBaseUrl) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            // return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n            return <img src={strapiBaseUrl + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { fetchStrapiBaseUrl, getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{},\n            strapiBaseUrl: ''\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        this.props.setActiveTabKey(index);\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n        const strapiUrl = await fetchStrapiBaseUrl();\n        this.setState({ strapiBaseUrl: strapiUrl });\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.props.collectionType && this.props.contentId) {\n            if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n                const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n                this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n                this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n                this.props.setActiveTabKey(0);\n                this.setState({ currentCode: [this.props.contentId] })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal, this.state.strapiBaseUrl)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal, this.state.strapiBaseUrl)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModal, this.state.strapiBaseUrl)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import moment from 'moment';\nimport { Col, Grid, PaginationRow, Row, ListView, ListViewItem } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";          \nimport { PAGINATION_MESSAGES, parseData } from '../helper/Helper';\nimport { Spinner } from 'patternfly-react/dist/js/components/Spinner';\n class MultiContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // PAGINATION STATE\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      searchBtnClk: false,\n\n      // MODAL STATE\n      show: false,\n      activeTabKey: 0,\n      contentDetailsOnModal: {},\n\n      // SEARCH STATE\n      searchQuery: '',\n      setSearchBy: '',\n      stowSearchQueryTillSubmit: '',\n\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: [],\n      contentIdForModal: '',\n      tempSelectedCollectionType: [],\n      loadingData: false\n    }\n    this.searchByKey = '';\n    // this.stowSearchQueryTillSubmit = '';\n\n  }\n\n  componentDidMount = async () => {\n    this.populateConfigForm();\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n  }\n  \n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      if (this.props.searchText || this.searchByKey) {\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value ? this.state.selectedCollectionType[0].value : this.props.selectedCollectionTypeValue.value,\n          this.state.searchQuery ? this.state.searchQuery : this.props.searchText, this.props.colLabel, this.state.page, this.state.pageSize\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.shouldShowEtSaveBtn('visible');\n  }\n\n  populateConfigForm = async () => {\n    if (this.props.selectedCollectionTypeValue.value && this.props.selectedCollectionTypeValue.label) {\n      this.setState({ selectedCollectionType: [this.props.selectedCollectionTypeValue] })\n      if (this.props.searchText && this.props.colLabel) {\n        this.searchByKey = this.props.colLabel;\n        this.setState({searchQuery: this.props.searchText, stowSearchQueryTillSubmit: this.props.searchText})\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText, this.props.colLabel, PAGE, PAGESIZE\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.props.selectedCollectionTypeValue.value)\n      }\n    }\n    if (this.props.selectedContentList.length) {\n      this.setState({selectedContent: parseData(this.props.selectedContentList)})\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  stateUpdateOnFilterContentsByName(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true,\n      loadingData: false\n    });\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n    this.setState({ show: true, contentDetailsOnModal: content, contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    // this.props.setQueryTerm('');\n    this.props.setFieldSearchBy('');\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType, searchQuery: '', stowSearchQueryTillSubmit: '' })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n    }\n    this.setState({ contentIdForModal: undefined });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    this.setState({\n      loadingData: true,\n     });\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      setSearchBy: contentData && contentData.results.length && Object.keys(contentData.results[0])[1],\n      loadingData: false,\n      // selectedContent: [] // commented due to issue of clearing the cache of selected content.\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: this.state.stowSearchQueryTillSubmit }, async () => {\n      // this.setState({ stowSearchQueryTillSubmit: '' })\n      // collectionType, query, searchBy\n      this.props.setFieldSearchBy(this.searchByKey);\n      if (this.state.searchQuery) {\n        this.setState({ loadingData: true });\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value,\n          this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n          );\n          this.stateUpdateOnFilterContentsByName(searchResult);\n        } else {\n          this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n        }\n    })\n  }\n\n   handleQueryChange = (e) => {\n     // this.props.setQueryTerm( e.target.value );\n     e.preventDefault();\n     this.setState({ stowSearchQueryTillSubmit: e.target.value })\n     // this.setState({ searchQuery: e.target.value })\n   }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  onContentSelect(content) {\n    if (!this.state.selectedContent.find(contentItem => (contentItem.id === content.id))) {\n      this.setState({ selectedContent: [content, ...this.state.selectedContent] })\n    } else {\n      const removedUnselectedContentId = this.state.selectedContent.filter(contentItem => contentItem.id !== content.id);\n      this.setState({ selectedContent: removedUnselectedContentId })\n    }\n  }\n\n\n  onContentListSaveHandler = () => {\n    this.props.setQueryTerm( this.state.searchQuery );\n    this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ ...el, contentId: el.id, templateId: null })))\n    this.props.setSelectedContentName(this.state.selectedCollectionType[0].value, this.state.selectedCollectionType[0].label, this.state.searchQuery)\n  }\n\n  checkIfSelected = (content) => {\n    if (this.state.selectedContent.length) {\n      const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      if (selectedItem) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n   fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  isToEnableSaveQueryBtn() {\n    return !(this.state.selectedContent.length === 0 && this.state.contents && this.state.contents.length);\n  }\n\n   editMode = (key) => {\n     if (this.props.isEditable === 'edit' &&\n       Object.keys(this.props.selectedCollectionTypeValue).length\n       && this.props.selectedCollectionTypeValue.label\n       && this.props.selectedCollectionTypeValue.value\n     ) {  // keep in constant file\n       return this.props.selectedCollectionTypeValue[key]\n     }\n     return null\n   }\n\n   cancelHandler = () => {\n     this.props.setSelectedContentName(this.editMode('value'), this.editMode('label'))\n     if (this.props.isEditable === 'edit' && this.state.selectedContent.length) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n     if (this.props.isEditable === 'edit' && !this.props.searchText) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n   }\n\n   render() {\n    const pagination = {\n      page: !this.state.page ? 1 : this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              <FormattedMessage id=\"app.contentList\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b><FormattedMessage id=\"app.selectCollectionType\" /></b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={this.props.intl.formatMessage({ id: \"app.selectCollection\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.searchQuery ? this.state.searchQuery : this.state.stowSearchQueryTillSubmit}\n                        value={this.state.stowSearchQueryTillSubmit}\n                        // this.stowSearchQueryTillSubmit\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                        placeholder={this.props.intl.formatMessage({ id: \"app.searchContentByName\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id='app.search' /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                {this.state.loadingData &&\n                  <Spinner\n                    loading={this.state.loadingData}\n                    className=\"\"\n                    size=\"md\"\n                  ></Spinner>}\n                {!this.state.loadingData && <>\n                  <table className=\"table dataTable table-striped table-bordered table-hover\">\n                    <thead>\n                      <tr>\n                        {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.contents.map(content => {\n                        return (\n                          <tr key={content.id}>\n                            <td width=\"5%\" align=\"center\">\n                              <input onChange={() => {\n                                this.onContentSelect(content); if (!this.state.selectedContent.length) {\n                                  this.props.setQueryTerm('')\n                                }\n                              }}\n                                type=\"checkbox\" checked={this.checkIfSelected(content)} id={content + content.id} name=\"content\" value={content.id}\n                              />\n                            </td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          </tr>)\n                      })}\n                    </tbody>\n                  </table>\n                  <div className=\"custom-page\"></div>\n                  <PaginationRow\n                    itemCount={this.state.totalItems}\n                    itemsStart={itemsStart}\n                    itemsEnd={itemsEnd}\n                    viewType=\"table\"\n                    pagination={pagination}\n                    amountOfPages={!this.state.lastPage ? 1 : this.state.lastPage}\n                    pageInputValue={!this.state.currPageWillUpdating ? 1 : this.state.currPageWillUpdating}\n                    onPageSet={this.changePage}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={() => { this.setState({ searchBtnClk: false }); this.changePage(1) }}\n                    onPreviousPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page - 1) }}\n                    onPageInput={this.onPageInput}\n                    onNextPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page + 1) }}\n                    onLastPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.lastPage) }}\n                    onSubmit={this.onSubmit}\n                    messages={PAGINATION_MESSAGES(this.props)}\n                  />\n                </>\n                }\n              </Col>\n            </Row>\n            {\n              <>\n                <Row className=\"mt-2\" >\n                  <Col sm={12}>\n                    <h6><b><FormattedMessage id='app.widgetConfiguration' /></b></h6>\n                  </Col>\n                </Row>\n                <Row className=\"mt-2\" >\n                  <Col sm={2}>\n                  <FormattedMessage id='app.queryFilter' />\n                  </Col>\n                  <Col sm={10} className=\"queryBg\">\n                    <code>\n                      <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.state.selectedCollectionType[0].label} </span>\n                      <span style={{ color: \"#0088ce\" }}>\n                        {\n                          // (this.state.searchQuery.length || this.props.searchText.length) > 0 && (<><b>WHERE Name = </b> %{this.state.searchQuery || this.props.searchText}% </>)\n                          (this.state.searchQuery.length > 0) && (<><b>WHERE Name = </b> %{this.state.searchQuery}% </>)\n                        }\n                        <b>ORDER BY</b> creation date <b>DESC</b>\n                      </span>\n                    </code>\n                  </Col>\n                </Row>\n              </>\n              }\n            {this.state.selectedContent.length > 0 && this.state.selectedContent.map(content => {\n              return (\n                <Row className=\"mt-2\" key={content.id} style={{ borderBottom: \"1px solid lightgrey\", padding: \".5rem\" }}>\n                  <Col sm={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                    {this.fetchTitleOrName(content)}\n                  </Col>\n                  <Col sm={8}>\n                    {this.state.selectedCollectionType && this.state.selectedCollectionType[0].label}\n                  </Col>\n                  <Col sm={2} className={\"SingleContentConfigFormBody__addButtons\"}>\n                    <button className=\"btn\" onClick={()=>this.onContentSelect(content)}><FormattedMessage id='app.remove' /></button>\n                  </Col>\n                </Row>\n              )\n            })}\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={6}>\n              </Col>\n              <Col sm={6} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n\n                  <button className=\"btn-default btn\"\n                    onClick={() => this.cancelHandler()}>\n                    <FormattedMessage id='app.cancel' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={this.isToEnableSaveQueryBtn()}>\n                    <FormattedMessage id='app.saveAsQuery' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={!this.state.selectedContent.length}>\n                    <FormattedMessage id='app.saveAsListOfContents'/>\n                  </button>\n\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey} />\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(MultiContentList);                                 ","export default {\n    'app.contentList': 'Content List',\n    'app.selectCollectionType': 'Select Collection Type',\n    'app.info':'Info',\n    'app.content': 'Content',\n    'app.contentsButton': 'contents',\n    'app.contentButton': 'content',\n    'app.name':'Name',\n    'app.created':'Created by',\n    'app.lastEdited':'Last edited',\n    'app.createdDate':'Created date',\n    'app.selectDefaultTemplate':'Select default template*',\n    'app.addExistingContent':'Add existing ',\n    'app.addNewContent':'Add new content',\n    'app.select':'Select',\n    'app.selectCollection':'Choose an option',\n    'app.widgetConfiguration':'Widget Configuration',\n    'app.queryFilter':'Query Filter',\n    'app.cancel':'Cancel',\n    'app.savedAsQuery':'Saved as Query',\n    'app.saveAsQuery':'Save as Query',\n    'app.saveAsListOfContents':'Save as list of Contents',\n    'app.select':'Select',\n    // 'app.lastEdited':'Last Edited',\n    'app.createdEdited':'Created Edited',\n    'app.searchContentByName':'Filter By Name...',\n    'app.remove':'Remove',\n    'app.query':' Query',\n    'app.selectTemplate':'Select Template',\n    'app.edit':'Edit',\n    'app.queryFilter':' Query Filter',\n    'app.search':'Search',\n    'app.applyToAllContents':'Apply to all contents',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    }","export default {\n    'app.contentList': 'Content Elenco',\n    'app.selectCollectionType': 'Seleziona Tipo di raccolta',\n    'app.info':'Informazioni',\n    'app.content': ' Contenuto',\n    'app.contentsButton': 'contenuti',\n    'app.contentButton': 'contenuto',\n    'app.name':'Nome',\n    'app.created':'Creata da',\n    'app.lastEdited':'Ultima modifica',\n    'app.createdDate':'Creata Data',\n    'app.selectDefaultTemplate':'Seleziona il modello predefinito*',\n    'app.addExistingContent':'Aggiungi esistente',\n    'app.addNewContent':'Aggiungi nuovo contenuto',\n    'app.select':'Seleziona',\n    'app.selectCollection':\"Scegliere un'opzione\",\n    'app.widgetConfiguration':'Configurazione del widget',\n    'app.queryFilter':'Filtro di query',\n    'app.cancel':'Annulla',\n    'app.savedAsQuery':'Salvato come query',\n    'app.saveAsQuery':'Salva come query',\n    'app.saveAsListOfContents':'Salva come elenco di contenuti',\n    'app.select':'Selezionare',\n    // 'app.lastEdited':'Ultima modifica',\n    'app.createdEdited':'Data di Creazione',\n    'app.searchContentByName':'Filtra per nome',\n    'app.remove':'Rimuovere',\n    'app.query':'Domanda',\n    'app.selectTemplate':'Seleziona Modello',\n    'app.edit':'modificare',\n    'app.query':'Filtro di query',\n    'app.search':'Ricerca',\n    'app.applyToAllContents':'Applica a tutti i contenuti',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    }\n\n    //'app.content': 'Contenuto',","import { Button } from 'patternfly-react';\nimport React from 'react';\nimport { BTN_RELOAD_PAGE, STRAPI_URL } from '../helper/Constant';\nexport default function StrapiConfigWarning() {\n    return (\n        <div className=\"well\">\n            <div>\n                <h4><strong><span className=\"pficon pficon-warning-triangle-o\"></span> {STRAPI_URL} can't be reached. \n                    Please click <a href={process.env.REACT_APP_STRAPI_CONFIG_FE_URL} target=\"_blank\">here</a> to configure it.</strong></h4>\n            </div>\n            <div className=\"mt-2\">\n                <Button bsStyle=\"primary\" onClick={() => window.location.reload()}>\n                    {BTN_RELOAD_PAGE}\n                </Button>\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { IntlProvider } from \"react-intl\";\nimport Config from './page/Config';\nimport MultiContentList from './page/MultiContentList';\n\nimport en from \"./en.js\";\nimport it from \"./it.js\";\nimport StrapiConfigWarning from './page/StrapiConfigWarning';\nimport { STRAPI_BASE_URL_KEY } from './helper/Constant';\nimport { checkIfUrlExists, getStrapiConfigurations } from './api/Api';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentName: null,\n            mappingOfContentTemplate: '',\n            contentIdAndTemplateId: '',\n            selectedCollectionType: null,\n            searchText: '',\n            saveQuery: '',\n            colLabel: '',\n            locale:'en',\n            isEditable: '',\n            strapiConfLoaded: false\n        };\n    }\n\n    componentDidMount = async () => {\n        await this.getStrapiConfiguration();\n        this.setLocale();\n        if (!localStorage.getItem(STRAPI_BASE_URL_KEY)) {\n            this.shouldShowEtSaveBtn('hidden');\n        }\n    }\n\n    /**\n     * Get strapi configurations\n     */\n    getStrapiConfiguration = async () => {\n        localStorage.removeItem(STRAPI_BASE_URL_KEY);\n        const { data, isError } = await getStrapiConfigurations();\n        if (!isError && data && data.data && data.data.baseUrl) {\n            const result = await checkIfUrlExists(data.data.baseUrl);\n            if (result && result.data && result.data.status === 200 && !result.isError) {\n                localStorage.setItem(STRAPI_BASE_URL_KEY, data.data.baseUrl);\n            }\n        }\n        this.setState({ strapiConfLoaded: true });\n    }\n\n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContentTemplate = (data) => {\n        const getJsonString = JSON.stringify(data.map(el => ({ templateId: el.templateId, contentId: el.contentId })));\n        this.setState({ mappingOfContentTemplate: data.length ? JSON.stringify(data): '', contentIdAndTemplateId: encodeURI(getJsonString) });\n    }\n\n    setSelectedContentName = (contentName, contentLabel) => {\n        this.setState({ selectedContentName: contentName, selectedCollectionType: contentLabel })\n    }\n\n    setQueryTerm = (searchTerm) => {\n        this.setState({ searchText: searchTerm })\n    }\n\n    SaveQueryHandler = (saveQueryData) => {\n        this.setState({ saveQuery: encodeURI(JSON.stringify(saveQueryData)) });\n    }\n\n    setFieldSearchBy = (fieldSearchWith) => {\n        this.setState({ colLabel: fieldSearchWith })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    manipulateIsEditable = (value) => this.setState({ isEditable: value });\n\n    decideLocale = locale => {\n        if (locale === 'en') return en;\n        if (locale === 'it') return it;\n    }\n\n    /**\n     * Hide save button\n     * @param {*} btnVisibility \n     */\n    shouldShowEtSaveBtn = (btnVisibility) => {\n        for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n            el.style.visibility = btnVisibility;\n        }\n    }\n\n    render() {\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.decideLocale(this.state.locale)}>\n                <>\n                    {this.state.strapiConfLoaded && localStorage.getItem(STRAPI_BASE_URL_KEY)\n                    ?\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config\n                                    selectedContent={this.state.mappingOfContentTemplate}\n                                    mappingOfContentTemplate={this.state.mappingOfContentTemplate}\n                                    setContentTemplate={this.setContentTemplate}\n                                    selectedContentLabel={this.state.selectedCollectionType}\n                                    searchTerm={this.state.searchText}\n                                    SaveQueryHandler={this.SaveQueryHandler}\n                                    selectedContentName={this.state.selectedContentName}\n                                    manipulateIsEditable={this.manipulateIsEditable}\n                                    contentIdAndTemplateId={this.state.contentIdAndTemplateId}\n                                    saveQuery={this.state.saveQuery}\n                                />\n                            </Route>\n                            <Route path='/configpage' exact>\n                                <MultiContentList\n                                    setContentTemplate={this.setContentTemplate}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    setQueryTerm={this.setQueryTerm}\n                                    setFieldSearchBy={this.setFieldSearchBy}\n                                    searchText={this.state.searchText}\n                                    selectedCollectionTypeValue={{ label: this.state.selectedCollectionType, value: this.state.selectedContentName }}\n                                    selectedContentList={this.state.mappingOfContentTemplate}\n                                    colLabel={this.state.colLabel}\n                                    isEditable={this.state.isEditable}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                    :\n                    this.state.strapiConfLoaded && <StrapiConfigWarning />\n                    }\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        // this.render()\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n\n    get config() {\n        return (this.reactRootRef && this.reactRootRef.current) ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return (this.reactRootRef && this.reactRootRef.current) ? this.reactRootRef.current.setState(value) : {}\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n}\n\ncustomElements.get('list-content-widget-config') || customElements.define('list-content-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}